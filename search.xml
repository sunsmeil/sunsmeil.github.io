<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[三步配置svn一键删除 一键添加]]></title>
      <url>https://sunsmeil.github.io/2016/12/08/%E4%B8%89%E6%AD%A5%E9%85%8D%E7%BD%AEsvn%E4%B8%80%E9%94%AE%E5%88%A0%E9%99%A4-%E4%B8%80%E9%94%AE%E6%B7%BB%E5%8A%A0/</url>
      <content type="html"><![CDATA[<h1 id="svn-批量删除批量添加配置"><a href="#svn-批量删除批量添加配置" class="headerlink" title="svn 批量删除批量添加配置"></a>svn 批量删除批量添加配置</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>本地文件 有大量文件改动 需手动添加或删除 </p>
<p>像这种。。</p>
<p>鬼知道我经历了什么。。</p>
<p><img src="http://dev.imoxiu.cn/~xuzhaoyang/share/svn1.png" alt="image"></p>
<h2 id="想要的效果"><a href="#想要的效果" class="headerlink" title="想要的效果"></a>想要的效果</h2><p>一个命令全部添加 ？状态；一个命令删除全部 ！状态文件；</p>
<p><strong>（慎用 不用添加多余文件 例如 node_modules）</strong></p>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ol>
<li>到根目录下<br>运行 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi .bashrc</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果没有错 你会进入如下页面<br><img src="http://dev.imoxiu.cn/~xuzhaoyang/share/svn2.png" alt="image"></p>
<ol>
<li>输入 i进入编辑模式</li>
</ol>
<p>添加红框中的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias add_all=&quot;svn st | grep &apos;^\?&apos; | awk &apos;&#123;print \$2&#125;&apos; | xargs svn add&quot;</div><div class="line">alias rm_all=&quot;svn st | grep &apos;^\!&apos; | awk &apos;&#123;print \$2&#125;&apos; | xargs svn rm&quot;</div></pre></td></tr></table></figure>
<p>输入 :wq 保存 退出</p>
<blockquote>
<p>解释下这两行的意思 </p>
<p>首先svn status查看svn状态，列出所有改动，打!号的是已经删除的文件但是还未标记成从库中除去，grep !将这些文件单独抽离出来.</p>
<p>再用awk ‘{print $2}’<br>将抽离出来的文本结果处理，留下每一行的第二段文字，即后面的文件名，<br>此处必须注意，svn status|grep !和后面的语句|awk ‘{print $2}’|xargs svn del之间，必须有一个<strong>空格</strong>，否则终端还是会认为这个!号是特殊符号</p>
</blockquote>
<ol>
<li>退出后 回到根目录运行 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source .bashrc</div></pre></td></tr></table></figure>
</li>
</ol>
<p>完成啦</p>
<h2 id="下面看一下具体使用效果"><a href="#下面看一下具体使用效果" class="headerlink" title="下面看一下具体使用效果"></a>下面看一下具体使用效果</h2><p><img src="http://dev.imoxiu.cn/~xuzhaoyang/share/svn3.png" alt="image"><br><img src="http://dev.imoxiu.cn/~xuzhaoyang/share/svn4.png" alt="image"><br><img src="http://dev.imoxiu.cn/~xuzhaoyang/share/svn5.png" alt="image"></p>
<p>只要使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add_all</div></pre></td></tr></table></figure></p>
<p>  和<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm_all</div></pre></td></tr></table></figure></p>
<p> 就OK啦~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式原理 及 常用总结（一）]]></title>
      <url>https://sunsmeil.github.io/2016/11/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8E%9F%E7%90%86-%E5%8F%8A-%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">常用正则</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="元字符说明"><a href="#元字符说明" class="headerlink" title="元字符说明"></a>元字符说明</h3><ul>
<li><p>\b   </p>
<blockquote>
<p>作用：单词间隔  想找“hi” 如果不想找到history这种包含hi的单词 前后要加\b哟~</p>
</blockquote>
</li>
<li><p>.  (没错是个点)</p>
<blockquote>
<p>匹配除了换行符以外的任意字符</p>
</blockquote>
</li>
<li><p>*(代表数量)</p>
<blockquote>
<p>前边的内容可以连续重复使用任意次以使整个表达式得到匹配</p>
</blockquote>
<p>==那么.*就代表任意数量不包含换行的字符==</p>
</li>
<li><p>\d (一位数字)</p>
<blockquote>
<p>\d{2} 重复出现两次</p>
</blockquote>
</li>
<li>\s<blockquote>
<p>任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格</p>
</blockquote>
</li>
<li>\w<blockquote>
<p>字母或数字或下划线或汉字等</p>
</blockquote>
</li>
<li>^匹配你要用来查找的字符串的开头，$匹配结尾</li>
<li>{5,12}<blockquote>
<p>则是重复的次数不能少于5次，不能多于12次，否则都不匹配。</p>
</blockquote>
</li>
<li>[.?!]<blockquote>
<p>匹配标点</p>
</blockquote>
</li>
<li>\进行转义</li>
<li>|分歧条件（从左至右 注意顺序 满足一个及跳出）</li>
</ul>
<table>
<thead>
<tr>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>重复零次或更多次</td>
</tr>
<tr>
<td>+</td>
<td>重复一次或更多次</td>
</tr>
<tr>
<td>?</td>
<td>重复零次或一次</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>复n次或更多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>常用的反义代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>\W</td>
<td>匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任意不是空白符的字符</td>
</tr>
<tr>
<td>\D</td>
<td>匹配任意非数字的字符</td>
</tr>
<tr>
<td>\B</td>
<td>匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td>[^x]</td>
<td>匹配除了x以外的任意字符</td>
</tr>
<tr>
<td>[^aeiou]</td>
<td>匹配除了aeiou这几个字母以外的任意字符</td>
</tr>
</tbody>
</table>
<h3 id="常用正则"><a href="#常用正则" class="headerlink" title="==常用正则=="></a>==常用正则==</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">中文字符： [\u4e00-\u9fa5]</div><div class="line"></div><div class="line">双字节字符： [^\x00-\xff]</div><div class="line"></div><div class="line">空白行： \n\s*\r</div><div class="line"></div><div class="line">Email地址: [\w!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]+(?:\.[\w!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?</div><div class="line"></div><div class="line">网址url: [a-zA-z]+://[^\s]*</div><div class="line"></div><div class="line">国内电话：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\&#123;7,8&#125;</div><div class="line"></div><div class="line">QQ号：[1-9][0-9]&#123;4,&#125;</div><div class="line"></div><div class="line">邮政编码：[1-9]\d&#123;5&#125;(?!\d)</div><div class="line"></div><div class="line">身份证号：^(\d&#123;6&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;3&#125;)([0-9]|X)$</div><div class="line"></div><div class="line">匹配(年-月-日)格式日期：([0-9]&#123;3&#125;[1-9]|[0-9]&#123;2&#125;[1-9][0-9]&#123;1&#125;|[0-9]&#123;1&#125;[1-9][0-9]&#123;2&#125;|[1-9][0-9]&#123;3&#125;)-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8])))</div><div class="line"></div><div class="line">匹配正整数： ^[1-9]\d*$</div><div class="line"></div><div class="line">匹配负整数：^-[1-9]\d*$</div><div class="line"></div><div class="line">匹配整数：^-?[1-9]\d*$</div><div class="line"></div><div class="line">匹配非负整数（正整数 + 0）：^[1-9]\d*|0$</div><div class="line"></div><div class="line">匹配非正整数（负整数 + 0）：^-[1-9]\d*|0$</div><div class="line"></div><div class="line">匹配正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$</div><div class="line"></div><div class="line">匹配负浮点数：^-[1-9]\d*\.\d*|-0\.\d*[1-9]\d*$</div></pre></td></tr></table></figure>
<h6 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h6><p><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">http://deerchao.net/tutorials/regex/regex.htm</a><br><a href="http://tool.oschina.net/regex/#" target="_blank" rel="external">http://tool.oschina.net/regex/#</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[keycode]]></title>
      <url>https://sunsmeil.github.io/2016/10/14/keycode/</url>
      <content type="html"><![CDATA[<p>常用 回车（13） 空格（32） up(38) down(40)<br><a id="more"></a></p>
<ul>
<li>keycode    8 = BackSpace 回格</li>
<li>keycode    9 = Tab</li>
<li>keycode   12 = Clear</li>
<li>keycode   13 = Enter 回车</li>
<li>keycode   16 = Shift_L</li>
<li>keycode   17 = Control_L</li>
<li>keycode   18 = Alt_L</li>
<li>keycode   19 = Pause</li>
<li>keycode   20 = Caps_Lock</li>
<li>keycode   27 = Escape</li>
<li>keycode   32 = space</li>
<li>keycode   33 = Prior</li>
<li>keycode   34 = Next</li>
<li>keycode   35 = End</li>
<li>keycode   36 = Home</li>
<li>keycode   37 = Left</li>
<li>keycode   38 = Up</li>
<li>keycode   39 = Right</li>
<li>keycode   40 = Down</li>
<li>keycode   41 = Select</li>
<li>keycode   42 = Print</li>
<li>keycode   43 = Execute</li>
<li>keycode   45 = Insert</li>
<li>keycode   46 = Delete</li>
<li>keycode   47 = Help</li>
<li>keycode   48 = 0 equal braceright</li>
<li>keycode   49 = 1 exclam onesuperior</li>
<li>keycode   50 = 2 quotedbl twosuperior</li>
<li>keycode   51 = 3 section threesuperior</li>
<li>keycode   52 = 4 dollar</li>
<li>keycode   53 = 5 percent</li>
<li>keycode   54 = 6 ampersand</li>
<li>keycode   55 = 7 slash braceleft</li>
<li>keycode   56 = 8 parenleft bracketleft</li>
<li>keycode   57 = 9 parenright bracketright</li>
<li>keycode   65 = a A</li>
<li>keycode   66 = b B</li>
<li>keycode   67 = c C</li>
<li>keycode   68 = d D</li>
<li>keycode   69 = e E EuroSign</li>
<li>keycode   70 = f F</li>
<li>keycode   71 = g G</li>
<li>keycode   72 = h H</li>
<li>keycode   73 = i I</li>
<li>keycode   74 = j J</li>
<li>keycode   75 = k K</li>
<li>keycode   76 = l L</li>
<li>keycode   77 = m M mu</li>
<li>keycode   78 = n N</li>
<li>keycode   79 = o O</li>
<li>keycode   80 = p P</li>
<li>keycode   81 = q Q at</li>
<li>keycode   82 = r R</li>
<li>keycode   83 = s S</li>
<li>keycode   84 = t T</li>
<li>keycode   85 = u U</li>
<li>keycode   86 = v V</li>
<li>keycode   87 = w W</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IE兼容性 积累]]></title>
      <url>https://sunsmeil.github.io/2016/10/14/IE%E5%85%BC%E5%AE%B9%E6%80%A7-%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<p>主要针对IE8以下兼容性 积累<br>↖(^ω^)↗<br><a id="more"></a></p>
<h3 id="rgba-兼容IE8"><a href="#rgba-兼容IE8" class="headerlink" title="rgba 兼容IE8"></a>rgba 兼容IE8</h3><p><a href="http://www.tuicool.com/articles/juiEFrb" target="_blank" rel="external">http://www.tuicool.com/articles/juiEFrb</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#66ffffff,endColorstr=#66ffffff);</div></pre></td></tr></table></figure>
<p><img src="http://img2.tuicool.com/iEvEVr.png!web" alt="image"></p>
<blockquote>
<p>为便于复制 ( <em> ^ __ ^ </em> ) </p>
</blockquote>
<table>
<thead>
<tr>
<th>透明度</th>
<th>IE filter值</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.1</td>
<td>19</td>
</tr>
<tr>
<td>0.2</td>
<td>33</td>
</tr>
<tr>
<td>0.3</td>
<td>4C</td>
</tr>
<tr>
<td>0.4</td>
<td>66</td>
</tr>
<tr>
<td>0.5</td>
<td>7F</td>
</tr>
<tr>
<td>0.6</td>
<td>99</td>
</tr>
<tr>
<td>0.7</td>
<td>B2</td>
</tr>
<tr>
<td>0.8</td>
<td>C8</td>
</tr>
<tr>
<td>0.9</td>
<td>E5</td>
</tr>
</tbody>
</table>
<h3 id="opacity-兼容ie8"><a href="#opacity-兼容ie8" class="headerlink" title="opacity 兼容ie8"></a>opacity 兼容ie8</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">filter: progid:DXImageTransform.Microsoft.Alpha(opacity=40);</div></pre></td></tr></table></figure>
<h3 id="background-cover-兼容IE8"><a href="#background-cover-兼容IE8" class="headerlink" title="background-cover 兼容IE8"></a>background-cover 兼容IE8</h3><p>背景图两边模糊<br>background 加center 设背景颜色</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background: url(../img/bj.jpg) no-repeat #333c41 center;</div></pre></td></tr></table></figure>
<h3 id="position-默认及兼容-8以下（不包括8）"><a href="#position-默认及兼容-8以下（不包括8）" class="headerlink" title="position 默认及兼容 8以下（不包括8）"></a>position 默认及兼容 8以下（不包括8）</h3><ul>
<li>position 默认值 static</li>
<li><p>position  inherit</p>
<p><a href="http://w3help.org/zh-cn/causes/RA8001" target="_blank" rel="external">http://w3help.org/zh-cn/causes/RA8001</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端面试题]]></title>
      <url>https://sunsmeil.github.io/2016/10/13/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>基础css html js<br><a id="more"></a></p>
<h4 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML&amp;CSS"></a>HTML&amp;CSS</h4><p><strong>1. 盒子模型</strong></p>
<ul>
<li>包含 内容 内边距（padding） 边框（border）外边距（margin）。</li>
</ul>
<p><strong>2. 常用的display属性</strong></p>
<ul>
<li>none  隐藏</li>
<li>block 去掉隐藏 块级</li>
<li>inline-block 内联块级</li>
<li>inline 内联元素</li>
<li>table 块级表格</li>
<li>inline-table 内联表格</li>
<li>list-item 列表</li>
</ul>
<p><strong>3. 什么是清除浮动？如何清除</strong></p>
<ul>
<li>元素采用float布局时 会脱离文本流  需要在下面清除浮动</li>
<li>clear：both 进行清除</li>
<li>overflow：auto 父级添加</li>
<li>伪类 <figure class="highlight plain"><figcaption><span>&#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    clear:both;</div><div class="line">    content:&apos;.&apos;;</div><div class="line">    display:block;</div><div class="line">    width: 0;</div><div class="line">    height: 0;</div><div class="line">    visibility:hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>4. position</strong></p>
<ul>
<li>position:relative  相对</li>
<li>position:absolute  绝对 相对第一个static定位以外定位</li>
<li>position:fixed  绝对 相对浏览器</li>
<li>static  默认</li>
<li>inherit 继承父元素</li>
</ul>
<p><strong>5. 垂直居中</strong></p>
<ul>
<li>height 加 line-height 配合</li>
<li>position 配合 top50%  translateY(-50%)</li>
<li>position 配合 top50% margin-top 负值</li>
<li>在 content 元素外插入一个 div。设置此 div height:50%; margin-bottom:-contentheight;。<br>content 清除浮动，并显示在中间。</li>
<li><figure class="highlight plain"><figcaption><span>&#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    position: absolute;</div><div class="line">    top: 0;</div><div class="line">    bottom: 0;</div><div class="line">    left: 0;</div><div class="line">    right: 0;</div><div class="line">    margin: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>6.flex</strong></p>
<p>display:flex (里面的clear失效)</p>
<p>属性</p>
<ul>
<li>flex-basis  第一个盒子的初始长度的选择<br>div:nth-of-type(1) {flex-basis: 80px;}</li>
<li>flex-direction<br>相反顺序</li>
<li>flex-flow复合属性<br>flex-flow:row-reverse wrap; //相反 拆行</li>
<li>flex-grow 扩展</li>
</ul>
<p>div:nth-of-type(1) {flex-grow: 1;}<br>div:nth-of-type(2) {flex-grow: 3;}<br>div:nth-of-type(3) {flex-grow: 1;}</p>
<ul>
<li>flex-shrink 收缩</li>
</ul>
<p>div:nth-of-type(2) {flex-shrink: 3;}</p>
<ul>
<li>flex-wrap 拆行</li>
</ul>
<p>flex-wrap: wrap;</p>
<h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><p><strong>1.原生js事件绑定和解除</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// 事件绑定</div><div class="line">        this.bindHandler = (function() &#123;</div><div class="line">            if (window.addEventListener) &#123;// 标准浏览器</div><div class="line">                return function(elem, type, handler) &#123;// elem:节点    type:事件类型   handler:事件处理程序</div><div class="line">                    // 最后一个参数为true:在捕获阶段调用事件处理程序    为false:在冒泡阶段调用事件处理程序</div><div class="line">                    elem.addEventListener(type, handler, false);</div><div class="line">                &#125;</div><div class="line">            &#125; else if (window.attachEvent) &#123;// IE浏览器</div><div class="line">                return function(elem, type, handler) &#123;</div><div class="line">                    elem.attachEvent(&quot;on&quot; + type, handler);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)();</div><div class="line"></div><div class="line">        // 事件解除</div><div class="line">        this.removeHandler = (function() &#123;</div><div class="line">            if (window.removeEventListerner) &#123;// 标准浏览器</div><div class="line">                return function(elem, type, handler) &#123;</div><div class="line">                    elem.removeEventListerner(type, handler, false);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125; else if (window.detachEvent) &#123;// IE浏览器</div><div class="line">                return function(elem, type, handler) &#123;</div><div class="line">                    elem.detachEvent(&quot;on&quot; + type, handler);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)();</div></pre></td></tr></table></figure>
<p><strong>2. dom 创建 添加 查找 删除</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">createElement() //创建元素</div><div class="line"></div><div class="line">appendChild()</div><div class="line">removeChild()</div><div class="line">replaceChild()</div><div class="line">insertBefore()</div><div class="line"></div><div class="line">getElementsByTagName()</div><div class="line">getElementsByName()</div><div class="line">getElementById()</div></pre></td></tr></table></figure>
<p><strong>3. 事件冒泡 事件捕获 阻止事件冒泡 默认事件的方式</strong></p>
<p>冒泡：<br>事件会从最内层的元素开始发生，一直向上传播</p>
<p>捕获：<br>事件会从最外层开始发生，直到最具体的元素</p>
<p>阻止事件冒泡：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function stopBubble(e) &#123;</div><div class="line">      //如果提供了事件对象，则这是一个非IE浏览器</div><div class="line">      if ( e &amp;&amp; e.stopPropagation )</div><div class="line">          //因此它支持W3C的stopPropagation()方法</div><div class="line">          e.stopPropagation();</div><div class="line">      else</div><div class="line">          //否则，我们需要使用IE的方式来取消事件冒泡</div><div class="line">          window.event.cancelBubble = true;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//阻止浏览器的默认行为</div><div class="line">   function stopDefault( e ) &#123;</div><div class="line">       //阻止默认浏览器动作(W3C)</div><div class="line">       if ( e &amp;&amp; e.preventDefault )</div><div class="line">           e.preventDefault();</div><div class="line">       //IE中阻止函数器默认动作的方式</div><div class="line">       else</div><div class="line">           window.event.returnValue = false;</div><div class="line">       return false;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong>4. 什么是变量声明提升</strong></p>
<p>就是把变量提升提到函数的top的地方</p>
<p><strong>5.XMLHttpRequest 完整GET请求</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//完整的GET请求</div><div class="line">var oAjax = new XMLHttpRequest();//创建Ajax对象</div><div class="line">oAjax.open(&quot;GET&quot;,&quot;create.php&quot;,true);//连接服务器</div><div class="line">oAjax.send();//发送请求</div><div class="line">//完整的POST发送请求</div><div class="line">var oAjax = new XMLHttpRequest();//创建</div><div class="line">oAjax.open(&quot;POST&quot;,&quot;create.php&quot;,true);//&quot;POST&quot;</div><div class="line">oAjax.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);//设置HTTP头信息.必须在open与send之间,否则出现异常.</div><div class="line">oAjax.send(&quot;name=陈二狗&amp;sex=男&quot;);//发送给服务器的内容</div></pre></td></tr></table></figure>
<p><strong>6.跨域实现方式</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var windowObj = window; // 可以是其他的 Window 对象的引用</div><div class="line">var data = null;</div><div class="line"></div><div class="line">addEventListener(&apos;message&apos;, function(e)&#123;</div><div class="line">    if(e.origin == &apos;http://jasonkid.github.io/fezone&apos;) &#123;</div><div class="line">        data = e.data;</div><div class="line">        </div><div class="line">        e.source.postMessage(&apos;Got it!&apos;, &apos;*&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><strong>1. ES6新特性</strong></p>
<ul>
<li><p>解构， let&amp;const 字符串模板<br><strong>2. 模块化理解</strong><br>便于多人开发 大项目拆分 require.js<br><strong>3. 常用库及简介</strong></p>
<p><a href="http://web.jobbole.com/84644/" target="_blank" rel="external">http://web.jobbole.com/84644/</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo博客搭建 window环境]]></title>
      <url>https://sunsmeil.github.io/2016/09/30/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-window%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h1 id="用hexo-git-在window下搭建个人博客"><a href="#用hexo-git-在window下搭建个人博客" class="headerlink" title="用hexo git 在window下搭建个人博客"></a>用hexo git 在window下搭建个人博客</h1><a id="more"></a> 
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol>
<li><p>node</p>
<p> node安装：<a href="http://jingyan.baidu.com/article/b0b63dbfca599a4a483070a5.html" target="_blank" rel="external">http://jingyan.baidu.com/article/b0b63dbfca599a4a483070a5.html</a></p>
<blockquote>
<p>注意：安装在c盘之外的话 需要配置环境变量</p>
</blockquote>
</li>
<li><p>git</p>
<p> git安装：<a href="http://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html" target="_blank" rel="external">http://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html</a></p>
<blockquote>
<p>下一步 下一步就好<br> 最好设置一下 全局username 和 name </p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name [username]</div><div class="line">git config --global user.email [email]</div></pre></td></tr></table></figure>
</li>
<li><p>github 账号</p>
<ul>
<li><p>注册一个github 账号。</p>
<blockquote>
<p>需要验证一下邮箱 如果是qq邮箱的话 有可能验证邮件被拦截 从拦截中取出就好</p>
</blockquote>
</li>
<li><p>新建一个项目  </p>
<blockquote>
<p>项目命名<strong>必须</strong>为 githubname.github.io</p>
</blockquote>
</li>
<li><p>获取项目链接地址 可以使用http 地址 例如</p>
<blockquote>
<p><a href="https://github.com/sunsmeil/sunsmeil.github.io.git" target="_blank" rel="external">https://github.com/sunsmeil/sunsmeil.github.io.git</a></p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><ol>
<li><p>如果安装在c盘，可以直接在c盘创建一个博客的文件夹。然后在该文件夹中 右键打开 Git Bush Here</p>
</li>
<li><p>在此目录下运行 </p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo -g</div></pre></td></tr></table></figure>
<blockquote>
<p>安装hexo。 -g 为全局</p>
</blockquote>
<ol>
<li>hexo默认支持markdown格式 及.md。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>md打包编辑成html 且在本地运行  打开<strong>localhost:4000</strong> 及可看到博客效果</p>
</blockquote>
<ol>
<li>重点 将本地内容上传 github</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure>
<blockquote>
<p>如果成功没有报错  会弹出对话框 输入用户名 密码</p>
</blockquote>
<p>可能遇到问题 ：</p>
<ol>
<li>运行完 没有报错 也没有反应<br> 解决：检查目录下有public 文件夹<br> 没有重新运行 hexo s</li>
<li><p>改完上传没有变化<br> 运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean //根目录下运行</div><div class="line">hexo s</div><div class="line">hexo d  //上传</div></pre></td></tr></table></figure>
</li>
<li><p>浏览器输入地址 yousitename.github.io<br>看到效果♪(^∇^*)</p>
</li>
</ol>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><blockquote>
<p>推荐主题选择<br><a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">https://www.zhihu.com/question/24422335</a></p>
</blockquote>
<ol>
<li><p>我用的是第一名的next</p>
<p> 官方文档十分详尽（评论，主题，统计）</p>
<p> <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a></p>
</li>
<li><p>这个 也不错 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">https://github.com/litten/hexo-theme-yilia</a></p>
</li>
</ol>
<p>这边头像链接如果选用 国内百度http 有可能看不到图片 </p>
<blockquote>
<p>推荐 Github 的头像 右键审查 复制链接即可</p>
</blockquote>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo n &quot;article_name&quot; //新建文章</div><div class="line"></div><div class="line">hexo n page &quot;page_name&quot; //新建页面</div></pre></td></tr></table></figure>
<p>首页只显示 文章简介<br>加入 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--more--&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: 高程三深入（对象）</div><div class="line">date: 2016-09-30 10:50:44</div><div class="line">categories: js //分类</div><div class="line">tags: [js,高程三] //标签</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[高程三（面向对象）]]></title>
      <url>https://sunsmeil.github.io/2016/09/30/%E9%AB%98%E7%A8%8B%E4%B8%89%EF%BC%88%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>高程三 各种模式<br><a id="more"></a></p>
<h4 id="6-1-理解对象"><a href="#6-1-理解对象" class="headerlink" title="6.1 理解对象"></a>6.1 理解对象</h4><h5 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h5><ol>
<li>创建实例<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var person = new Object();</div><div class="line"></div><div class="line">person.name = &quot;mable&quot;; </div><div class="line"></div><div class="line">person,age = &quot;23&quot;;</div><div class="line"></div><div class="line">person.sayName = function()&#123;</div><div class="line">    alert(this.name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>2.也可以这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var person = &#123; </div><div class="line"></div><div class="line">    name:&apos;mable&apos;,</div><div class="line">    age:&apos;21&apos;,</div><div class="line">    </div><div class="line">    sayName:function()&#123;</div><div class="line">        alert(this.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ol>
<li>数据属性</li>
</ol>
<ul>
<li>Configurable 能否通过delete删除属性重新定义 <strong>默认true</strong></li>
<li>Enumerable 能否通过for-in循环返回 <strong>默认true</strong></li>
<li>Writable 能否修改值 <strong>默认true</strong></li>
<li>Value  属性的数据值 <strong>默认undefined</strong></li>
</ul>
<ol>
<li>访问器属性</li>
</ol>
<ul>
<li>Configurable 能否通过delete删除属性重新定义 <strong>默认true</strong></li>
<li>Enumerable 能否通过for-in循环返回 <strong>默认true</strong></li>
<li>Get 读取属性时调用的函数 <strong>默认undefined</strong></li>
<li>Set 写入属性时调用的函数 <strong>默认undefined</strong></li>
</ul>
<blockquote>
<p>访问器属性不能直接定义，必须使用object.defineProperty()定义。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var book = &#123;</div><div class="line">   _year : 2012,</div><div class="line">   edition : 1</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Object.defineProperty(book,&quot;year&quot;,&#123;</div><div class="line">   get : function()&#123;</div><div class="line">       return this._year;</div><div class="line">   &#125;,</div><div class="line">   set : function(newValue)&#123;</div><div class="line">       </div><div class="line">       if(newValue &gt; 2012) &#123;</div><div class="line">           this._year = newValue;</div><div class="line">           this.edition += newValue - 2003;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">book.year = 2005;</div><div class="line">alert(book.edition); //2</div></pre></td></tr></table></figure>
<ol>
<li>定义多个属性</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var book = &#123;&#125;;</div><div class="line"></div><div class="line">object.defineProperties(book,&#123;</div><div class="line">   _year:&#123;</div><div class="line">       value:2004</div><div class="line">   &#125;,</div><div class="line">   </div><div class="line">   edition:&#123;</div><div class="line">       value:1</div><div class="line">   &#125;,</div><div class="line">   </div><div class="line">   year:&#123;</div><div class="line">       get:function()&#123;</div><div class="line">           return this._year;</div><div class="line">       &#125;,</div><div class="line">       </div><div class="line">       set:function(newValue)&#123;</div><div class="line">           if(newValue &gt; 2004)&#123;</div><div class="line">               this._year = newValue;</div><div class="line">               this.edition += newValue - 2004;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>读取属性的特性<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//数据属性</div><div class="line">var descriptor = Object.getOwnPropartyDescriptor(book,&quot;_year&quot;);</div><div class="line">alert(descriptor.value);</div><div class="line">alert(descriptor.confi gurable); //false</div><div class="line"></div><div class="line">alert(typeof descriptor.get); //undefined</div><div class="line">//访问器属性</div><div class="line">var descriptor = Object.getOwnPropartyDescriptor(book,&quot;year&quot;);</div><div class="line">alert(descriptor.value);</div><div class="line">alert(descriptor.enumerable);</div><div class="line">alert(typeof descriptor.get);//function</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="6-2-创建对象"><a href="#6-2-创建对象" class="headerlink" title="6.2 创建对象"></a>6.2 创建对象</h4><ol>
<li>工厂模式<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function createPerson(name,age,job)&#123;</div><div class="line">    var o = new Object();</div><div class="line">    o.name = name;</div><div class="line">    o.age = age;</div><div class="line">    o.job = job;</div><div class="line">    o.sayName = function()&#123;</div><div class="line">        alert(this.name);</div><div class="line">    &#125;;</div><div class="line">    return o;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var person1 = creatPerson(&quot;mable&quot;,23,&quot;it&quot;);</div><div class="line">var person2 = creatPerson(&quot;hahah&quot;,23,&quot;sdd&quot;);</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>没有解决对象识别的问题（及怎样知道一个对象的类型）</p>
</blockquote>
<ol>
<li>构造函数模式</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function Person(name,age,job)&#123;</div><div class="line">    this.name = name;</div><div class="line">    this.age = age;</div><div class="line">    this.job = job;</div><div class="line">    this.sayName = function()&#123;</div><div class="line">        alert(this.name);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var person1 = new Person (&quot;mable&quot;,23,&quot;it&quot;);</div><div class="line">var person2 = new Person(&quot;hahah&quot;,23,&quot;sdd&quot;);</div></pre></td></tr></table></figure>
<blockquote>
<p>1.没有显示地创建对象2.直接将属性和方法赋给this对象3.没有return语句</p>
</blockquote>
<p>3.原型模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function Person()&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.name = &quot;haha&quot;;</div><div class="line">Person.prototype.age = 12;</div><div class="line">Person.prototype.job = &quot;111111&quot;;</div><div class="line">Person.prototype.sayName = function()&#123;</div><div class="line">    alert(this.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var person1 = new Person();</div><div class="line">person1.sayName(); //&quot;haha&quot;</div><div class="line"></div><div class="line">var person2 = new Person();</div><div class="line">person2.sayName(); //haha</div><div class="line"></div><div class="line">alert(person1.sayName == person2.sayName); //true</div></pre></td></tr></table></figure></p>
<blockquote>
<p>isPrototypeOf 内部是否有指向的指针</p>
<p>getPrototypeOf 返回内部属性值</p>
<p>hasOwnProperty() 检测实例属性  来自实例 来自原型</p>
</blockquote>
<p>4.动态原型模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function Person(name.age,job)&#123;</div><div class="line">    //属性</div><div class="line">    this.name = name;</div><div class="line">    this.age = age;</div><div class="line">    this.job = job;</div><div class="line">    //方法</div><div class="line">    if(typeof this.sayName != &quot;function&quot;)&#123;</div><div class="line">        </div><div class="line">        Person.prototype.sayName = function()&#123;</div><div class="line">            alert(this.name);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var friend = new Person(&quot;haha&quot;,29,&quot;sdhj&quot;);</div><div class="line">friend.sayName();</div></pre></td></tr></table></figure></p>
<p>5.寄生构造函数模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function Person(name,age,job)&#123;</div><div class="line">    var o = new Object();</div><div class="line">    o.name = name;</div><div class="line">    o.age =age;</div><div class="line">    o.job = job;</div><div class="line">    o.sayName = function()&#123;</div><div class="line">        alert(this.name);</div><div class="line">    &#125;;</div><div class="line">    return o;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var friend = new Person(&quot;haha&quot;,12,&quot;sssss&quot;);</div><div class="line">frinend.sayName(); //&quot;haha&quot;</div></pre></td></tr></table></figure></p>
<ol>
<li>稳妥构造函数模式<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function Person(name,age,job)&#123;</div><div class="line">    //创建返回的对象</div><div class="line">    var o = new Object();</div><div class="line">    //可以在这里定义私有变量和函数</div><div class="line">    </div><div class="line">    //添加方法</div><div class="line">    o.sayName = function()&#123;</div><div class="line">        alert(name)</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    //返回对象</div><div class="line">    return o;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="6-3-原型链"><a href="#6-3-原型链" class="headerlink" title="6.3 原型链"></a>6.3 原型链</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">function SuperType()&#123;</div><div class="line">    this.property = true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SuperType.prototype.getSuperValue = function()&#123;</div><div class="line">    return this.property;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function SubType()&#123;</div><div class="line">    this.subproperty = false;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//继承了 SuperType</div><div class="line">SubType.prototype = new SuperType();</div><div class="line"></div><div class="line">SubType.prototype.getSubValue = function()&#123;</div><div class="line">    return this.subproperty;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var instance = new SubType();</div><div class="line">alert(instance.getSuperValue()); //true</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[高程三深入（对象）]]></title>
      <url>https://sunsmeil.github.io/2016/09/30/%E9%AB%98%E7%A8%8B%E4%B8%89%E6%B7%B1%E5%85%A5%EF%BC%88%E5%AF%B9%E8%B1%A1%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>高程三 object,function,array<br><a id="more"></a></p>
<h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><ul>
<li><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4></li>
</ul>
<ol>
<li><p>new操作符 创建</p>
<p>  <code>var mable = new Array();</code></p>
<p> //可以规定数组长度</p>
<p> <code>var mable = new Array(20);</code></p>
<p> //可以初始几个值</p>
<p> <code>var mable = new Array(&quot;haha&quot;,&quot;sss&quot;,&quot;sss&quot;);</code></p>
</li>
</ol>
<pre><code>*另：new可以省略*

` var mable = Array();

//可以规定数组长度

var mable = Array(20);

//可以初始几个值

var mable = Array(&quot;haha&quot;,&quot;sss&quot;,&quot;sss&quot;);

结果相同
</code></pre><ol>
<li>数组字面量表示法</li>
</ol>
<pre><code>//空数组
var person = []
//初始几个值
var person = [&quot;ss&quot;,&quot;sss&quot;]
//不要这样 ie8以下会创建3个  其他 2个
var person = [1,2,]
`
</code></pre><ul>
<li><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4></li>
</ul>
<ol>
<li><p>基于0的索引访问</p>
<p> <code>person[0]</code></p>
</li>
</ol>
<p><em>注：可通过设置length移除最后一项</em></p>
<ul>
<li><h4 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h4><p>  <code>Array.isArray(value)</code></p>
</li>
<li><h4 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h4><p>  1.toString valueOf</p>
<p>  返回数组的字符串标示 已逗号相隔</p>
<p>  2.toLocalString</p>
<p>  返回结果相同 但调用方法不同</p>
<p>  3.join可以改变不同的分割符</p>
<p>  <em>注:数组中任意一项值为 null or undefined ,那么以上方法返回结果空字符串</em></p>
</li>
<li><h4 id="栈方法（后进先出）"><a href="#栈方法（后进先出）" class="headerlink" title="栈方法（后进先出）"></a>栈方法（后进先出）</h4><p> 1.push pop (添加 取得)</p>
</li>
<li><h4 id="队列方法（先进先出）"><a href="#队列方法（先进先出）" class="headerlink" title="队列方法（先进先出）"></a>队列方法（先进先出）</h4><p> 1.push shift<br>  <em>另有 unshift 同时使用pop可反方向模拟队列</em></p>
</li>
<li><h4 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h4><p> 1.reverse  反转数组顺序</p>
<p> 2.sort<br>  默认升序 （由小到大）<br>  比较函数 接收两个参数</p>
<p>  `<br>  function compare(v1,v2){</p>
<pre><code>  if(v1 &lt; v2){
      return -1;
  } else if(v1 &gt; v2){
      return 1;
  }else{
      return 0;
  }
}
</code></pre><p>  `</p>
<p>  <em>注：比较函数通过返回值影响排序</em></p>
</li>
<li><h4 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h4><p> 1.concat </p>
<p>   1)添加数组 将数组放置末尾联结<br>   2)添加值  直接放在末尾即可</p>
<p> 2.slice</p>
<p>  1.可传 1~2个参数  1个参数 从此位置到结尾  2个参数 从第一个参数开始 到第二个参数结尾</p>
<p>  <em>有负值时 用数组长度加上该值在判断  如结束小于开始空数组 如负数大于数组长度 返回所有数组</em></p>
<p> 3.splice</p>
<p>   1) 删除  splice(0,2)</p>
<p>   2) 插入 splice(2,0,”ss”,”sss”)  //起始位置 要删除项数 要插入</p>
<p>   3) 替换 splice(2,1,”ss”)</p>
</li>
<li><h4 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h4><ol>
<li>indexOf(从头查找)</li>
<li>lastIndexOf（从末尾查找）<br><em>找不到 返回-1 找到 返回位置索引</em></li>
</ol>
</li>
<li><h4 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h4><p>1.every 和 some<br>查询数组项 满足某一条件 返回 true 或 false<br>区别  every每项都是true  结果为true</p>
<pre><code>some 一项为true  结果为true
</code></pre><p>2.filter 和map<br>返回结果组成数组<br>filter  指定返回的数组中 是否有某一项<br>map  每项都运行传人函数 返回结果数组</p>
<p>3.forEach<br>  没有返回值 类似for</p>
</li>
<li><h4 id="缩小方法"><a href="#缩小方法" class="headerlink" title="缩小方法"></a>缩小方法</h4><ol>
<li>reduce(从左向右)</li>
<li>reduceRight(从右向左)</li>
</ol>
<p>`<br> reduce(function(prev,cur,index,array){</p>
<pre><code>return prev + cur;
</code></pre><p>  })<br>`</p>
</li>
</ul>
<h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><ul>
<li><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4></li>
</ul>
<ol>
<li><p>new操作符 创建</p>
<p> <code>var person = new Object();</code></p>
</li>
<li><p>对象字面量表示法</p>
<p> <code>var person = {
 name:&#39;ssss&#39;,
 age:&#39;22&#39;
 }</code></p>
</li>
</ol>
<ul>
<li><h4 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h4></li>
</ul>
<ol>
<li><p>点表示法</p>
<p> <code>person.name</code></p>
</li>
<li><p>方括号</p>
<p> <code>person[&quot;name&quot;]</code></p>
</li>
</ol>
<p><em>注：常用第一种  但第二种可用于变量  属性名包含错误语法字符时</em></p>
<ul>
<li><h4 id="应用环境（方括号）"><a href="#应用环境（方括号）" class="headerlink" title="应用环境（方括号）"></a>应用环境（方括号）</h4><p>  相同类型数据提交</p>
</li>
</ul>
<h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><p>函数名是指针 函数是对象</p>
<ul>
<li><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ol>
<li><code>function asd (n1,n2){}</code></li>
<li><code>var s = function(n1,n2)</code></li>
<li><code>var s = new Function (&quot;n1&quot;,&quot;n2&quot;,&quot;return n1+n2&quot;)</code>//不推荐</li>
</ol>
</li>
<li><h4 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h4></li>
<li><h4 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h4>函数声明 可以在它之前调用 函数表达式不可以<br><code>//没有问题
alert(sun);
function sun(){
  return 1;
}
//报错
alert(sun);
var sun = function(){
  return 1;
}</code></li>
<li><h4 id="内部属性"><a href="#内部属性" class="headerlink" title="内部属性"></a>内部属性</h4><ol>
<li>arguments(保存函数参数)<br>arguments.callee 指向拥有这个arguments对象的函数</li>
<li>this</li>
</ol>
</li>
<li><h4 id="属性-方法"><a href="#属性-方法" class="headerlink" title="属性 方法"></a>属性 方法</h4><ol>
<li>length 接收命名参数的个数</li>
<li>prototype 保存所有实例方法</li>
<li>apply 和 call 区别在于call明确传递每一个参数  可用来扩充作用域</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
